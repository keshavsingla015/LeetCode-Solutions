Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.

 

Example 1:

Input: nums = [1,3,4,2,2]
Output: 2
Example 2:

Input: nums = [3,1,3,4,2]
Output: 3
 

Constraints:

1 <= n <= 105
nums.length == n + 1
1 <= nums[i] <= n
All the integers in nums appear only once except for precisely one integer which appears two or more times.
 

Follow up:

How can we prove that at least one duplicate number must exist in nums?
Can you solve the problem in linear runtime complexity?



//////////////////////////////////////

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int count = 0 ; 
        int n = nums.size() ; 
        long int array[n];

        for(int a = 0 ; a < n ; a++){
            array[a] = 0 ; 
        }

        for(int i = 0 ; i < n + 1 ; i++){
            array[nums[i]]++ ; 
            if(array[nums[i]] == 2){
                count = nums[i];
            }
        }
        return count ; 

    }
};

///////////////////////////////////////////////////////////////////
using first method 

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
		// initialise cnt vector of size nums with 0
        vector<int> cnt(nums.size(),0);
        int ind =  0;
		
		// store the cnt of each value in the cnt vector
        for(int i = 0; i<nums.size(); i++)
        {
            cnt[nums[i]]++;
        }
        
        for(int i = 0; i<cnt.size(); i++)
        {
			// if cnt[i] > 1
			// this means that element occur more than once in nums
			// we have to return i
            if(cnt[i] > 1)
            {
                ind  = i;
                break;
            }
        }
        
        return ind;
    }
	// for github repository link go to my profile.
};


////////////////////////////////////////////////
using maping function 


class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        map<int, int> m;
        int duplicate = 0;
        for(auto i= 0; i<nums.size(); ++i)
        ++m[nums[i]];
        
        for(auto i : m)
        {
            if(i.second > 1)
            {
                duplicate = i.first;
                break;
            }
        }
        return duplicate;
    }
};

////////////////////////////////////////////////////////////
