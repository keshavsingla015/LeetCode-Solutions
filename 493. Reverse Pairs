Given an integer array nums, return the number of reverse pairs in the array.

A reverse pair is a pair (i, j) where:

0 <= i < j < nums.length and
nums[i] > 2 * nums[j].
 

Example 1:

Input: nums = [1,3,2,3,1]
Output: 2
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1
Example 2:

Input: nums = [2,4,3,5,1]
Output: 3
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1
(2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1
 

Constraints:

1 <= nums.length <= 5 * 104
-231 <= nums[i] <= 231 - 1

/////////////////////////////////////////////////////////////////////////////////////////////////////


class Solution {
public:
    int reversePairs(vector<int>& nums) {
        int count = 0 ;

// divide into two arrays i and n - i ; start from back 
// sort n - i array 
// then use binary search to find position of digits less than (i) array[i] > 2*(n-i) wale array
// then add the number to count and move forward
// n * logn * logn aayegi time complexity 
        int length = nums.size() - 1; 
        int fnums =  length - i ; 
        int snums = i ; 

        for(int i = 0 ; i <= length ; i++){
            int y = -1 ; 
            int arr1 = nums[:fums];
            int arr2 = nums[sums:];
            sort(arr2);
            // find index to number; 
            int y = binarySearch(arr1[i]);
            if(y = -1){
                // toh uska preceding index ; 
            }
            count = count + y ; 
        }

    }
};
